#version 310 es
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
precision highp float;
layout(std430, binding = 0) buffer data_i32 { int _data_i32_[];}; 
layout(std430, binding = 0) buffer data_f32 { float _data_f32_[];}; 
layout(std430, binding = 1) buffer gtmp_i32 { int _gtmp_i32_[];}; 
layout(std430, binding = 1) buffer gtmp_f32 { float _gtmp_f32_[];}; 
float atomicAdd_data_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _data_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) + rhs)); } while (old_val != atomicCompSwap(_data_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicSub_data_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _data_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) - rhs)); } while (old_val != atomicCompSwap(_data_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMax_data_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _data_i32_[addr]; new_val = floatBitsToInt(max(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_data_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMin_data_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _data_i32_[addr]; new_val = floatBitsToInt(min(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_data_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); }float atomicAdd_gtmp_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _gtmp_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) + rhs)); } while (old_val != atomicCompSwap(_gtmp_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicSub_gtmp_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _gtmp_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) - rhs)); } while (old_val != atomicCompSwap(_gtmp_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMax_gtmp_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _gtmp_i32_[addr]; new_val = floatBitsToInt(max(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_gtmp_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMin_gtmp_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _gtmp_i32_[addr]; new_val = floatBitsToInt(min(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_gtmp_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); }
const float inf = 1.0f / 0.0f;
const float nan = 0.0f / 0.0f;
void substep_c44_04()
{ // range for
  // range known at runtime
  int _beg = 0, _end = _gtmp_i32_[0 >> 2];
  int _sid0 = int(gl_GlobalInvocationID.x);
  for (int _sid = _sid0; _sid < (_end - _beg); _sid += int(gl_WorkGroupSize.x * gl_NumWorkGroups.x)) {
    int _itv = _beg + _sid;
      int Gn = _itv;
      int C8S = 0;
      int Cxc = int(0);
      int C8U = C8S + 229416 * Cxc; // S0
      int C8V = C8U + 65576; // S9
      int Cmj = int(4095);
      int Cmk = Gn & Cmj;
      int Cxe = int(1);
      int C8Y = C8V + 8 * Cmk; // S9
      int C8Z = C8Y + 0; // S10
      float Gp = _data_f32_[C8Z >> 2];
      float Gq = float(64.0);
      float Gr = Gp * Gq;
      int C99 = C8Y + 4; // S11
      float Gt = _data_f32_[C99 >> 2];
      float Gu = Gt * Gq;
      float Gv = float(0.5);
      float Gw = Gr - Gv;
      float Gx = Gu - Gv;
      int Gy = int(Gw);
      int Gz = int(Gx);
      float GA = float(Gy);
      float GB = Gr - GA;
      float GC = float(Gz);
      float GD = Gu - GC;
      float GE = float(1.5);
      float GF = GE - GB;
      float GG = GE - GD;
      float GH = GF * GF;
      float GI = GG * GG;
      float GJ = GH * Gv;
      float GK = GI * Gv;
      float GL = float(1.0);
      float GM = GB - GL;
      float GN = GD - GL;
      float GO = GM * GM;
      float GP = GN * GN;
      float GQ = float(0.75);
      float GR = GQ - GO;
      float GS = GQ - GP;
      float GT = GB - Gv;
      float GU = GD - Gv;
      float GV = GT * GT;
      float GW = GU * GU;
      float GX = GV * Gv;
      float GY = GW * Gv;
      float H5 = float(0.0);
      float H6 = H5 - GB;
      float H7 = H5 - GD;
      float H8 = float(0.015625);
      float H9 = H6 * H8;
      float Ha = H7 * H8;
      float Hb = GJ * GK;
      int C9g = C8U + 131112; // S22
      int Cmr = int(63);
      int Cms = Gy & Cmr;
      int Cmw = Gz & Cmr;
      int CBc = int(6);
      int CBd = Cms << CBc;
      int Cxt = Cmw + CBd;
      int C9k = C9g + 8 * Cxt; // S22
      int C9l = C9k + 0; // S23
      float Hd = _data_f32_[C9l >> 2];
      int C9x = C9k + 4; // S24
      float Hf = _data_f32_[C9x >> 2];
      float Hg = Hb * Hd;
      float Hh = Hb * Hf;
      float Ho = Hd * H9;
      float Hp = Hd * Ha;
      float Hq = Hf * H9;
      float Hr = Hf * Ha;
      float Hs = float(4.0);
      float Ht = Hb * Hs;
      float Hu = Ht * Ho;
      float Hv = Ht * Hp;
      float Hw = Ht * Hq;
      float Hx = Ht * Hr;
      float Hy = float(4096.0);
      float Hz = Hu * Hy;
      float HA = Hv * Hy;
      float HB = Hw * Hy;
      float HC = Hx * Hy;
      float HP = GL - GD;
      float HQ = HP * H8;
      float HR = GJ * GS;
      int HT = Gz + Cxe;
      int CmM = HT & Cmr;
      int CxJ = CmM + CBd;
      int C9I = C9g + 8 * CxJ; // S22
      int C9J = C9I + 0; // S23
      float HV = _data_f32_[C9J >> 2];
      int C9V = C9I + 4; // S24
      float HX = _data_f32_[C9V >> 2];
      float HY = HR * HV;
      float HZ = HR * HX;
      float I1 = Hg + HY;
      float I4 = Hh + HZ;
      float I6 = HV * H9;
      float I7 = HV * HQ;
      float I8 = HX * H9;
      float I9 = HX * HQ;
      float Ia = HR * Hs;
      float Ib = Ia * I6;
      float Ic = Ia * I7;
      float Id = Ia * I8;
      float Ie = Ia * I9;
      float If = Ib * Hy;
      float Ig = Ic * Hy;
      float Ih = Id * Hy;
      float Ii = Ie * Hy;
      float Ik = Hz + If;
      float In = HA + Ig;
      float Iq = HB + Ih;
      float It = HC + Ii;
      float Iv = float(2.0);
      float Iw = Iv - GD;
      float Ix = Iw * H8;
      float Iy = GJ * GY;
      int Iz = int(2);
      int IA = Gz + Iz;
      int Cn2 = IA & Cmr;
      int CxZ = Cn2 + CBd;
      int Ca6 = C9g + 8 * CxZ; // S22
      int Ca7 = Ca6 + 0; // S23
      float IC = _data_f32_[Ca7 >> 2];
      int Caj = Ca6 + 4; // S24
      float IE = _data_f32_[Caj >> 2];
      float IF = Iy * IC;
      float IG = Iy * IE;
      float II = I1 + IF;
      float IL = I4 + IG;
      float IN = IC * H9;
      float IO = IC * Ix;
      float IP = IE * H9;
      float IQ = IE * Ix;
      float IR = Iy * Hs;
      float IS = IR * IN;
      float IT = IR * IO;
      float IU = IR * IP;
      float IV = IR * IQ;
      float IW = IS * Hy;
      float IX = IT * Hy;
      float IY = IU * Hy;
      float IZ = IV * Hy;
      float J1 = Ik + IW;
      float J4 = In + IX;
      float J7 = Iq + IY;
      float Ja = It + IZ;
      float Jc = GL - GB;
      float Jd = Jc * H8;
      float Je = GR * GK;
      int Jf = Gy + Cxe;
      int Cne = Jf & Cmr;
      int CBf = Cne << CBc;
      int Cyf = Cmw + CBf;
      int Cau = C9g + 8 * Cyf; // S22
      int Cav = Cau + 0; // S23
      float Jh = _data_f32_[Cav >> 2];
      int CaH = Cau + 4; // S24
      float Jj = _data_f32_[CaH >> 2];
      float Jk = Je * Jh;
      float Jl = Je * Jj;
      float Jn = II + Jk;
      float Jq = IL + Jl;
      float Js = Jh * Jd;
      float Jt = Jh * Ha;
      float Ju = Jj * Jd;
      float Jv = Jj * Ha;
      float Jw = Je * Hs;
      float Jx = Jw * Js;
      float Jy = Jw * Jt;
      float Jz = Jw * Ju;
      float JA = Jw * Jv;
      float JB = Jx * Hy;
      float JC = Jy * Hy;
      float JD = Jz * Hy;
      float JE = JA * Hy;
      float JG = J1 + JB;
      float JJ = J4 + JC;
      float JM = J7 + JD;
      float JP = Ja + JE;
      float JR = GR * GS;
      int Cyv = CmM + CBf;
      int CaS = C9g + 8 * Cyv; // S22
      int CaT = CaS + 0; // S23
      float JT = _data_f32_[CaT >> 2];
      int Cb5 = CaS + 4; // S24
      float JV = _data_f32_[Cb5 >> 2];
      float JW = JR * JT;
      float JX = JR * JV;
      float JZ = Jn + JW;
      float K2 = Jq + JX;
      float K4 = JT * Jd;
      float K5 = JT * HQ;
      float K6 = JV * Jd;
      float K7 = JV * HQ;
      float K8 = JR * Hs;
      float K9 = K8 * K4;
      float Ka = K8 * K5;
      float Kb = K8 * K6;
      float Kc = K8 * K7;
      float Kd = K9 * Hy;
      float Ke = Ka * Hy;
      float Kf = Kb * Hy;
      float Kg = Kc * Hy;
      float Ki = JG + Kd;
      float Kl = JJ + Ke;
      float Ko = JM + Kf;
      float Kr = JP + Kg;
      float Kt = GR * GY;
      int CyL = Cn2 + CBf;
      int Cbg = C9g + 8 * CyL; // S22
      int Cbh = Cbg + 0; // S23
      float Kv = _data_f32_[Cbh >> 2];
      int Cbt = Cbg + 4; // S24
      float Kx = _data_f32_[Cbt >> 2];
      float Ky = Kt * Kv;
      float Kz = Kt * Kx;
      float KB = JZ + Ky;
      float KE = K2 + Kz;
      float KG = Kv * Jd;
      float KH = Kv * Ix;
      float KI = Kx * Jd;
      float KJ = Kx * Ix;
      float KK = Kt * Hs;
      float KL = KK * KG;
      float KM = KK * KH;
      float KN = KK * KI;
      float KO = KK * KJ;
      float KP = KL * Hy;
      float KQ = KM * Hy;
      float KR = KN * Hy;
      float KS = KO * Hy;
      float KU = Ki + KP;
      float KX = Kl + KQ;
      float L0 = Ko + KR;
      float L3 = Kr + KS;
      float L5 = Iv - GB;
      float L6 = L5 * H8;
      float L7 = GX * GK;
      int L8 = Gy + Iz;
      int Co0 = L8 & Cmr;
      int CBh = Co0 << CBc;
      int Cz1 = Cmw + CBh;
      int CbE = C9g + 8 * Cz1; // S22
      int CbF = CbE + 0; // S23
      float La = _data_f32_[CbF >> 2];
      int CbR = CbE + 4; // S24
      float Lc = _data_f32_[CbR >> 2];
      float Ld = L7 * La;
      float Le = L7 * Lc;
      float Lg = KB + Ld;
      float Lj = KE + Le;
      float Ll = La * L6;
      float Lm = La * Ha;
      float Ln = Lc * L6;
      float Lo = Lc * Ha;
      float Lp = L7 * Hs;
      float Lq = Lp * Ll;
      float Lr = Lp * Lm;
      float Ls = Lp * Ln;
      float Lt = Lp * Lo;
      float Lu = Lq * Hy;
      float Lv = Lr * Hy;
      float Lw = Ls * Hy;
      float Lx = Lt * Hy;
      float Lz = KU + Lu;
      float LC = KX + Lv;
      float LF = L0 + Lw;
      float LI = L3 + Lx;
      float LK = GX * GS;
      int Czh = CmM + CBh;
      int Cc2 = C9g + 8 * Czh; // S22
      int Cc3 = Cc2 + 0; // S23
      float LM = _data_f32_[Cc3 >> 2];
      int Ccf = Cc2 + 4; // S24
      float LO = _data_f32_[Ccf >> 2];
      float LP = LK * LM;
      float LQ = LK * LO;
      float LS = Lg + LP;
      float LV = Lj + LQ;
      float LX = LM * L6;
      float LY = LM * HQ;
      float LZ = LO * L6;
      float M0 = LO * HQ;
      float M1 = LK * Hs;
      float M2 = M1 * LX;
      float M3 = M1 * LY;
      float M4 = M1 * LZ;
      float M5 = M1 * M0;
      float M6 = M2 * Hy;
      float M7 = M3 * Hy;
      float M8 = M4 * Hy;
      float M9 = M5 * Hy;
      float Mb = Lz + M6;
      float Me = LC + M7;
      float Mh = LF + M8;
      float Mk = LI + M9;
      float Mm = GX * GY;
      int Czx = Cn2 + CBh;
      int Ccq = C9g + 8 * Czx; // S22
      int Ccr = Ccq + 0; // S23
      float Mo = _data_f32_[Ccr >> 2];
      int CcD = Ccq + 4; // S24
      float Mq = _data_f32_[CcD >> 2];
      float Mr = Mm * Mo;
      float Ms = Mm * Mq;
      float Mu = LS + Mr;
      float Mx = LV + Ms;
      float Mz = Mo * L6;
      float MA = Mo * Ix;
      float MB = Mq * L6;
      float MC = Mq * Ix;
      float MD = Mm * Hs;
      float ME = MD * Mz;
      float MF = MD * MA;
      float MG = MD * MB;
      float MH = MD * MC;
      float MI = ME * Hy;
      float MJ = MF * Hy;
      float MK = MG * Hy;
      float ML = MH * Hy;
      float MN = Mb + MI;
      float MQ = Me + MJ;
      float MT = Mh + MK;
      float MW = Mk + ML;
      int CcJ = C8U + 98344; // S12
      int CcM = CcJ + 8 * Cmk; // S12
      int CcN = CcM + 0; // S13
      _data_f32_[CcN >> 2] = Mu;
      int CcX = CcM + 4; // S14
      _data_f32_[CcX >> 2] = Mx;
      float N4 = float(0.000390625);
      float N5 = Mu * N4;
      float N6 = Mx * N4;
      float N8 = Gp + N5;
      _data_f32_[C8Z >> 2] = N8;
      float Nb = Gt + N6;
      _data_f32_[C99 >> 2] = Nb;
      int CdH = C8U + 32808; // S20
      int CdK = CdH + 4 * Cmk; // S20
      int CdL = CdK + 0; // S21
      float Ne = _data_f32_[CdL >> 2];
      float Nh = MN + MW;
      float Ni = Nh * N4;
      float Nj = Ni + GL;
      float Nk = Ne * Nj;
      _data_f32_[CdL >> 2] = Nk;
      int Ce1 = C8U + 163880; // S15
      int Ce4 = Ce1 + 16 * Cmk; // S15
      int Ce5 = Ce4 + 0; // S16
      _data_f32_[Ce5 >> 2] = MN;
      int Cef = Ce4 + 4; // S17
      _data_f32_[Cef >> 2] = MQ;
      int Cep = Ce4 + 8; // S18
      _data_f32_[Cep >> 2] = MT;
      int Cez = Ce4 + 12; // S19
      _data_f32_[Cez >> 2] = MW;
  }
}

void main()
{
  substep_c44_04();
}
