#version 310 es
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
precision highp float;
layout(std430, binding = 0) buffer data_i32 { int _data_i32_[];}; 
layout(std430, binding = 0) buffer data_f32 { float _data_f32_[];}; 
layout(std430, binding = 1) buffer gtmp_i32 { int _gtmp_i32_[];}; 
layout(std430, binding = 1) buffer gtmp_f32 { float _gtmp_f32_[];}; 

const float inf = 1.0f / 0.0f;
const float nan = 0.0f / 0.0f;
void substep_c44_04()
{ // range for
  // range known at runtime
  int _beg = 0, _end = _gtmp_i32_[0 >> 2];
  int _sid0 = int(gl_GlobalInvocationID.x);
  for (int _sid = _sid0; _sid < (_end - _beg); _sid += int(gl_WorkGroupSize.x * gl_NumWorkGroups.x)) {
    int _itv = _beg + _sid;
      int Ia = _itv;
      int Crn = 0;
      int CPH = int(0);
      int Crp = Crn + 229416 * CPH; // S0
      int Crq = Crp + 65576; // S9
      int CEO = int(4095);
      int CEP = Ia & CEO;
      int CPJ = int(1);
      int Crt = Crq + 8 * CEP; // S9
      int Cru = Crt + 0; // S10
      float Ic = _data_f32_[Cru >> 2];
      float Id = float(64.0);
      float Ie = Ic * Id;
      int CrE = Crt + 4; // S11
      float Ig = _data_f32_[CrE >> 2];
      float Ih = Ig * Id;
      float Ii = float(0.5);
      float Ij = Ie - Ii;
      float Ik = Ih - Ii;
      int Il = int(Ij);
      int Im = int(Ik);
      float In = float(Il);
      float Io = Ie - In;
      float Ip = float(Im);
      float Iq = Ih - Ip;
      float Ir = float(1.5);
      float Is = Ir - Io;
      float It = Ir - Iq;
      float Iu = Is * Is;
      float Iv = It * It;
      float Iw = Iu * Ii;
      float Ix = Iv * Ii;
      float Iy = float(1.0);
      float Iz = Io - Iy;
      float IA = Iq - Iy;
      float IB = Iz * Iz;
      float IC = IA * IA;
      float ID = float(0.75);
      float IE = ID - IB;
      float IF = ID - IC;
      float IG = Io - Ii;
      float IH = Iq - Ii;
      float II = IG * IG;
      float IJ = IH * IH;
      float IK = II * Ii;
      float IL = IJ * Ii;
      float IS = float(0.0);
      float IT = IS - Io;
      float IU = IS - Iq;
      float IV = float(0.015625);
      float IW = IT * IV;
      float IX = IU * IV;
      float IY = Iw * Ix;
      int CrL = Crp + 131112; // S22
      int CEW = int(63);
      int CEX = Il & CEW;
      int CF1 = Im & CEW;
      int CTH = int(6);
      int CTI = CEX << CTH;
      int CPY = CF1 + CTI;
      int CrP = CrL + 8 * CPY; // S22
      int CrQ = CrP + 0; // S23
      int J0 = _data_i32_[CrQ >> 2];
      float J1 = float(J0);
      float J2 = float(0.0001);
      float J3 = J1 * J2;
      int Cs2 = CrP + 4; // S24
      int J5 = _data_i32_[Cs2 >> 2];
      float J6 = float(J5);
      float J7 = J6 * J2;
      float J8 = IY * J3;
      float J9 = IY * J7;
      float Jg = J3 * IW;
      float Jh = J3 * IX;
      float Ji = J7 * IW;
      float Jj = J7 * IX;
      float Jk = float(4.0);
      float Jl = IY * Jk;
      float Jm = Jl * Jg;
      float Jn = Jl * Jh;
      float Jo = Jl * Ji;
      float Jp = Jl * Jj;
      float Jq = float(4096.0);
      float Jr = Jm * Jq;
      float Js = Jn * Jq;
      float Jt = Jo * Jq;
      float Ju = Jp * Jq;
      float JH = Iy - Iq;
      float JI = JH * IV;
      float JJ = Iw * IF;
      int JL = Im + CPJ;
      int CFh = JL & CEW;
      int CQe = CFh + CTI;
      int Csd = CrL + 8 * CQe; // S22
      int Cse = Csd + 0; // S23
      int JN = _data_i32_[Cse >> 2];
      float JO = float(JN);
      float JP = JO * J2;
      int Csq = Csd + 4; // S24
      int JR = _data_i32_[Csq >> 2];
      float JS = float(JR);
      float JT = JS * J2;
      float JU = JJ * JP;
      float JV = JJ * JT;
      float JX = J8 + JU;
      float K0 = J9 + JV;
      float K2 = JP * IW;
      float K3 = JP * JI;
      float K4 = JT * IW;
      float K5 = JT * JI;
      float K6 = JJ * Jk;
      float K7 = K6 * K2;
      float K8 = K6 * K3;
      float K9 = K6 * K4;
      float Ka = K6 * K5;
      float Kb = K7 * Jq;
      float Kc = K8 * Jq;
      float Kd = K9 * Jq;
      float Ke = Ka * Jq;
      float Kg = Jr + Kb;
      float Kj = Js + Kc;
      float Km = Jt + Kd;
      float Kp = Ju + Ke;
      float Kr = float(2.0);
      float Ks = Kr - Iq;
      float Kt = Ks * IV;
      float Ku = Iw * IL;
      int Kv = int(2);
      int Kw = Im + Kv;
      int CFx = Kw & CEW;
      int CQu = CFx + CTI;
      int CsB = CrL + 8 * CQu; // S22
      int CsC = CsB + 0; // S23
      int Ky = _data_i32_[CsC >> 2];
      float Kz = float(Ky);
      float KA = Kz * J2;
      int CsO = CsB + 4; // S24
      int KC = _data_i32_[CsO >> 2];
      float KD = float(KC);
      float KE = KD * J2;
      float KF = Ku * KA;
      float KG = Ku * KE;
      float KI = JX + KF;
      float KL = K0 + KG;
      float KN = KA * IW;
      float KO = KA * Kt;
      float KP = KE * IW;
      float KQ = KE * Kt;
      float KR = Ku * Jk;
      float KS = KR * KN;
      float KT = KR * KO;
      float KU = KR * KP;
      float KV = KR * KQ;
      float KW = KS * Jq;
      float KX = KT * Jq;
      float KY = KU * Jq;
      float KZ = KV * Jq;
      float L1 = Kg + KW;
      float L4 = Kj + KX;
      float L7 = Km + KY;
      float La = Kp + KZ;
      float Lc = Iy - Io;
      float Ld = Lc * IV;
      float Le = IE * Ix;
      int Lf = Il + CPJ;
      int CFJ = Lf & CEW;
      int CTK = CFJ << CTH;
      int CQK = CF1 + CTK;
      int CsZ = CrL + 8 * CQK; // S22
      int Ct0 = CsZ + 0; // S23
      int Lh = _data_i32_[Ct0 >> 2];
      float Li = float(Lh);
      float Lj = Li * J2;
      int Ctc = CsZ + 4; // S24
      int Ll = _data_i32_[Ctc >> 2];
      float Lm = float(Ll);
      float Ln = Lm * J2;
      float Lo = Le * Lj;
      float Lp = Le * Ln;
      float Lr = KI + Lo;
      float Lu = KL + Lp;
      float Lw = Lj * Ld;
      float Lx = Lj * IX;
      float Ly = Ln * Ld;
      float Lz = Ln * IX;
      float LA = Le * Jk;
      float LB = LA * Lw;
      float LC = LA * Lx;
      float LD = LA * Ly;
      float LE = LA * Lz;
      float LF = LB * Jq;
      float LG = LC * Jq;
      float LH = LD * Jq;
      float LI = LE * Jq;
      float LK = L1 + LF;
      float LN = L4 + LG;
      float LQ = L7 + LH;
      float LT = La + LI;
      float LV = IE * IF;
      int CR0 = CFh + CTK;
      int Ctn = CrL + 8 * CR0; // S22
      int Cto = Ctn + 0; // S23
      int LX = _data_i32_[Cto >> 2];
      float LY = float(LX);
      float LZ = LY * J2;
      int CtA = Ctn + 4; // S24
      int M1 = _data_i32_[CtA >> 2];
      float M2 = float(M1);
      float M3 = M2 * J2;
      float M4 = LV * LZ;
      float M5 = LV * M3;
      float M7 = Lr + M4;
      float Ma = Lu + M5;
      float Mc = LZ * Ld;
      float Md = LZ * JI;
      float Me = M3 * Ld;
      float Mf = M3 * JI;
      float Mg = LV * Jk;
      float Mh = Mg * Mc;
      float Mi = Mg * Md;
      float Mj = Mg * Me;
      float Mk = Mg * Mf;
      float Ml = Mh * Jq;
      float Mm = Mi * Jq;
      float Mn = Mj * Jq;
      float Mo = Mk * Jq;
      float Mq = LK + Ml;
      float Mt = LN + Mm;
      float Mw = LQ + Mn;
      float Mz = LT + Mo;
      float MB = IE * IL;
      int CRg = CFx + CTK;
      int CtL = CrL + 8 * CRg; // S22
      int CtM = CtL + 0; // S23
      int MD = _data_i32_[CtM >> 2];
      float ME = float(MD);
      float MF = ME * J2;
      int CtY = CtL + 4; // S24
      int MH = _data_i32_[CtY >> 2];
      float MI = float(MH);
      float MJ = MI * J2;
      float MK = MB * MF;
      float ML = MB * MJ;
      float MN = M7 + MK;
      float MQ = Ma + ML;
      float MS = MF * Ld;
      float MT = MF * Kt;
      float MU = MJ * Ld;
      float MV = MJ * Kt;
      float MW = MB * Jk;
      float MX = MW * MS;
      float MY = MW * MT;
      float MZ = MW * MU;
      float N0 = MW * MV;
      float N1 = MX * Jq;
      float N2 = MY * Jq;
      float N3 = MZ * Jq;
      float N4 = N0 * Jq;
      float N6 = Mq + N1;
      float N9 = Mt + N2;
      float Nc = Mw + N3;
      float Nf = Mz + N4;
      float Nh = Kr - Io;
      float Ni = Nh * IV;
      float Nj = IK * Ix;
      int Nk = Il + Kv;
      int CGv = Nk & CEW;
      int CTM = CGv << CTH;
      int CRw = CF1 + CTM;
      int Cu9 = CrL + 8 * CRw; // S22
      int Cua = Cu9 + 0; // S23
      int Nm = _data_i32_[Cua >> 2];
      float Nn = float(Nm);
      float No = Nn * J2;
      int Cum = Cu9 + 4; // S24
      int Nq = _data_i32_[Cum >> 2];
      float Nr = float(Nq);
      float Ns = Nr * J2;
      float Nt = Nj * No;
      float Nu = Nj * Ns;
      float Nw = MN + Nt;
      float Nz = MQ + Nu;
      float NB = No * Ni;
      float NC = No * IX;
      float ND = Ns * Ni;
      float NE = Ns * IX;
      float NF = Nj * Jk;
      float NG = NF * NB;
      float NH = NF * NC;
      float NI = NF * ND;
      float NJ = NF * NE;
      float NK = NG * Jq;
      float NL = NH * Jq;
      float NM = NI * Jq;
      float NN = NJ * Jq;
      float NP = N6 + NK;
      float NS = N9 + NL;
      float NV = Nc + NM;
      float NY = Nf + NN;
      float O0 = IK * IF;
      int CRM = CFh + CTM;
      int Cux = CrL + 8 * CRM; // S22
      int Cuy = Cux + 0; // S23
      int O2 = _data_i32_[Cuy >> 2];
      float O3 = float(O2);
      float O4 = O3 * J2;
      int CuK = Cux + 4; // S24
      int O6 = _data_i32_[CuK >> 2];
      float O7 = float(O6);
      float O8 = O7 * J2;
      float O9 = O0 * O4;
      float Oa = O0 * O8;
      float Oc = Nw + O9;
      float Of = Nz + Oa;
      float Oh = O4 * Ni;
      float Oi = O4 * JI;
      float Oj = O8 * Ni;
      float Ok = O8 * JI;
      float Ol = O0 * Jk;
      float Om = Ol * Oh;
      float On = Ol * Oi;
      float Oo = Ol * Oj;
      float Op = Ol * Ok;
      float Oq = Om * Jq;
      float Or = On * Jq;
      float Os = Oo * Jq;
      float Ot = Op * Jq;
      float Ov = NP + Oq;
      float Oy = NS + Or;
      float OB = NV + Os;
      float OE = NY + Ot;
      float OG = IK * IL;
      int CS2 = CFx + CTM;
      int CuV = CrL + 8 * CS2; // S22
      int CuW = CuV + 0; // S23
      int OI = _data_i32_[CuW >> 2];
      float OJ = float(OI);
      float OK = OJ * J2;
      int Cv8 = CuV + 4; // S24
      int OM = _data_i32_[Cv8 >> 2];
      float ON = float(OM);
      float OO = ON * J2;
      float OP = OG * OK;
      float OQ = OG * OO;
      float OS = Oc + OP;
      float OV = Of + OQ;
      float OX = OK * Ni;
      float OY = OK * Kt;
      float OZ = OO * Ni;
      float P0 = OO * Kt;
      float P1 = OG * Jk;
      float P2 = P1 * OX;
      float P3 = P1 * OY;
      float P4 = P1 * OZ;
      float P5 = P1 * P0;
      float P6 = P2 * Jq;
      float P7 = P3 * Jq;
      float P8 = P4 * Jq;
      float P9 = P5 * Jq;
      float Pb = Ov + P6;
      float Pe = Oy + P7;
      float Ph = OB + P8;
      float Pk = OE + P9;
      int Cve = Crp + 98344; // S12
      int Cvh = Cve + 8 * CEP; // S12
      int Cvi = Cvh + 0; // S13
      _data_f32_[Cvi >> 2] = OS;
      int Cvs = Cvh + 4; // S14
      _data_f32_[Cvs >> 2] = OV;
      float Ps = float(0.000390625);
      float Pt = OS * Ps;
      float Pu = OV * Ps;
      float Pw = Ic + Pt;
      _data_f32_[Cru >> 2] = Pw;
      float Pz = Ig + Pu;
      _data_f32_[CrE >> 2] = Pz;
      int Cwc = Crp + 32808; // S20
      int Cwf = Cwc + 4 * CEP; // S20
      int Cwg = Cwf + 0; // S21
      float PC = _data_f32_[Cwg >> 2];
      float PF = Pb + Pk;
      float PG = PF * Ps;
      float PH = PG + Iy;
      float PI = PC * PH;
      _data_f32_[Cwg >> 2] = PI;
      int Cww = Crp + 163880; // S15
      int Cwz = Cww + 16 * CEP; // S15
      int CwA = Cwz + 0; // S16
      _data_f32_[CwA >> 2] = Pb;
      int CwK = Cwz + 4; // S17
      _data_f32_[CwK >> 2] = Pe;
      int CwU = Cwz + 8; // S18
      _data_f32_[CwU >> 2] = Ph;
      int Cx4 = Cwz + 12; // S19
      _data_f32_[Cx4 >> 2] = Pk;
  }
}

void main()
{
  substep_c44_04();
}
