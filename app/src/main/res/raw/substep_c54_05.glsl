#version 310 es
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
precision highp float;
layout(std430, binding = 0) buffer data_i32 { int _data_i32_[];}; 
layout(std430, binding = 0) buffer data_f32 { float _data_f32_[];}; 
layout(std430, binding = 1) buffer gtmp_i32 { int _gtmp_i32_[];}; 
layout(std430, binding = 1) buffer gtmp_f32 { float _gtmp_f32_[];}; 
layout(std430, binding = 2) buffer args_i32 { int _args_i32_[];}; 
layout(std430, binding = 2) buffer args_f32 { float _args_f32_[];}; 
layout(std430, binding = 7) buffer arr1_i32 { int _arr1_i32_[];}; 
layout(std430, binding = 7) buffer arr1_f32 { float _arr1_f32_[];}; 
layout(std430, binding = 6) buffer arr3_i32 { int _arr3_i32_[];}; 
layout(std430, binding = 6) buffer arr3_f32 { float _arr3_f32_[];}; 
layout(std430, binding = 5) buffer arr2_i32 { int _arr2_i32_[];}; 
layout(std430, binding = 5) buffer arr2_f32 { float _arr2_f32_[];}; 
layout(std430, binding = 4) buffer arr0_i32 { int _arr0_i32_[];}; 
layout(std430, binding = 4) buffer arr0_f32 { float _arr0_f32_[];}; 
float atomicAdd_data_f32(int addr, float rhs) { int old, new, ret; do { old = _data_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) + rhs)); } while (old != atomicCompSwap(_data_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicSub_data_f32(int addr, float rhs) { int old, new, ret; do { old = _data_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) - rhs)); } while (old != atomicCompSwap(_data_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMax_data_f32(int addr, float rhs) { int old, new, ret; do { old = _data_i32_[addr]; new = floatBitsToInt(max(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_data_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMin_data_f32(int addr, float rhs) { int old, new, ret; do { old = _data_i32_[addr]; new = floatBitsToInt(min(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_data_i32_[addr], old, new)); return intBitsToFloat(old); }float atomicAdd_gtmp_f32(int addr, float rhs) { int old, new, ret; do { old = _gtmp_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) + rhs)); } while (old != atomicCompSwap(_gtmp_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicSub_gtmp_f32(int addr, float rhs) { int old, new, ret; do { old = _gtmp_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) - rhs)); } while (old != atomicCompSwap(_gtmp_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMax_gtmp_f32(int addr, float rhs) { int old, new, ret; do { old = _gtmp_i32_[addr]; new = floatBitsToInt(max(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_gtmp_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMin_gtmp_f32(int addr, float rhs) { int old, new, ret; do { old = _gtmp_i32_[addr]; new = floatBitsToInt(min(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_gtmp_i32_[addr], old, new)); return intBitsToFloat(old); }float atomicAdd_arr0_f32(int addr, float rhs) { int old, new, ret; do { old = _arr0_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) + rhs)); } while (old != atomicCompSwap(_arr0_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicSub_arr0_f32(int addr, float rhs) { int old, new, ret; do { old = _arr0_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) - rhs)); } while (old != atomicCompSwap(_arr0_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMax_arr0_f32(int addr, float rhs) { int old, new, ret; do { old = _arr0_i32_[addr]; new = floatBitsToInt(max(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_arr0_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMin_arr0_f32(int addr, float rhs) { int old, new, ret; do { old = _arr0_i32_[addr]; new = floatBitsToInt(min(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_arr0_i32_[addr], old, new)); return intBitsToFloat(old); }float atomicAdd_arr1_f32(int addr, float rhs) { int old, new, ret; do { old = _arr1_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) + rhs)); } while (old != atomicCompSwap(_arr1_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicSub_arr1_f32(int addr, float rhs) { int old, new, ret; do { old = _arr1_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) - rhs)); } while (old != atomicCompSwap(_arr1_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMax_arr1_f32(int addr, float rhs) { int old, new, ret; do { old = _arr1_i32_[addr]; new = floatBitsToInt(max(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_arr1_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMin_arr1_f32(int addr, float rhs) { int old, new, ret; do { old = _arr1_i32_[addr]; new = floatBitsToInt(min(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_arr1_i32_[addr], old, new)); return intBitsToFloat(old); }float atomicAdd_arr2_f32(int addr, float rhs) { int old, new, ret; do { old = _arr2_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) + rhs)); } while (old != atomicCompSwap(_arr2_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicSub_arr2_f32(int addr, float rhs) { int old, new, ret; do { old = _arr2_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) - rhs)); } while (old != atomicCompSwap(_arr2_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMax_arr2_f32(int addr, float rhs) { int old, new, ret; do { old = _arr2_i32_[addr]; new = floatBitsToInt(max(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_arr2_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMin_arr2_f32(int addr, float rhs) { int old, new, ret; do { old = _arr2_i32_[addr]; new = floatBitsToInt(min(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_arr2_i32_[addr], old, new)); return intBitsToFloat(old); }float atomicAdd_arr3_f32(int addr, float rhs) { int old, new, ret; do { old = _arr3_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) + rhs)); } while (old != atomicCompSwap(_arr3_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicSub_arr3_f32(int addr, float rhs) { int old, new, ret; do { old = _arr3_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) - rhs)); } while (old != atomicCompSwap(_arr3_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMax_arr3_f32(int addr, float rhs) { int old, new, ret; do { old = _arr3_i32_[addr]; new = floatBitsToInt(max(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_arr3_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMin_arr3_f32(int addr, float rhs) { int old, new, ret; do { old = _arr3_i32_[addr]; new = floatBitsToInt(min(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_arr3_i32_[addr], old, new)); return intBitsToFloat(old); }
const float inf = 1.0f / 0.0f;
const float nan = 0.0f / 0.0f;
void substep_c54_05()
{ // range for
  // range known at runtime
  int _beg = 0, _end = _gtmp_i32_[4 >> 2];
  int _sid0 = int(gl_GlobalInvocationID.x);
  for (int _sid = _sid0; _sid < (_end - _beg); _sid += int(gl_WorkGroupSize.x * gl_NumWorkGroups.x)) {
    int _itv = _beg + _sid;
      int Fj = _itv;
      int Fk = 4;
      int Fl = _gtmp_i32_[Fk >> 2];
      int Fm = Fj - Fl * int(Fj / Fl);
      int Fo = int(0);
      int _li_Fp = 0;
      { // linear seek
        int _s0_Fp = _args_i32_[16 + 0 * 8 + 0];
        int _s1_Fp = _args_i32_[16 + 0 * 8 + 1];
        _li_Fp *= _s0_Fp;
        _li_Fp += Fm;
        _li_Fp *= _s1_Fp;
        _li_Fp += Fo;
      }
      int Fp = _li_Fp << 2;
      float Fq = _arr0_f32_[Fp >> 2];
      float Fr = float(128.0);
      float Fs = Fq * Fr;
      int Ft = int(1);
      int _li_Fu = 0;
      { // linear seek
        int _s0_Fu = _args_i32_[16 + 0 * 8 + 0];
        int _s1_Fu = _args_i32_[16 + 0 * 8 + 1];
        _li_Fu *= _s0_Fu;
        _li_Fu += Fm;
        _li_Fu *= _s1_Fu;
        _li_Fu += Ft;
      }
      int Fu = _li_Fu << 2;
      float Fv = _arr0_f32_[Fu >> 2];
      float Fw = Fv * Fr;
      float Fx = float(0.5);
      float Fy = Fs - Fx;
      float Fz = Fw - Fx;
      int FA = int(Fy);
      int FB = int(Fz);
      float FC = float(FA);
      float FD = float(FB);
      float FE = Fs - FC;
      float FF = Fw - FD;
      float FG = float(1.5);
      float FH = FG - FE;
      float FI = FG - FF;
      float FJ = FH * FH;
      float FK = FI * FI;
      float FL = FJ * Fx;
      float FM = FK * Fx;
      float FN = float(1.0);
      float FO = FE - FN;
      float FP = FF - FN;
      float FQ = FO * FO;
      float FR = FP * FP;
      float FS = float(0.75);
      float FT = FS - FQ;
      float FU = FS - FR;
      float FV = FE - Fx;
      float FW = FF - Fx;
      float FX = FV * FV;
      float FY = FW * FW;
      float FZ = FX * Fx;
      float G0 = FY * Fx;
      float G7 = float(0.0);
      float G8 = G7 - FE;
      float G9 = G7 - FF;
      float Ga = FL * FM;
      int BPD = 0;
      int BPF = BPD + 196608 * Fo; // S0
      int BPG = BPF + 65536; // S1
      int BZb = int(127);
      int BZc = FA & BZb;
      int BZg = FB & BZb;
      int Ca9 = int(7);
      int Caa = BZc << Ca9;
      int C7o = BZg + Caa;
      int BPK = BPG + 8 * C7o; // S1
      int BPL = BPK + 0; // S2
      float Gc = _data_f32_[BPL >> 2];
      float Gd = Ga * Gc;
      int BPX = BPK + 4; // S3
      float Gf = _data_f32_[BPX >> 2];
      float Gg = Ga * Gf;
      float Gn = Gc * G8;
      float Go = Gc * G9;
      float Gp = Gf * G8;
      float Gq = Gf * G9;
      float Gr = float(4.0);
      float Gs = Ga * Gr;
      float Gt = Gs * Gn;
      float Gu = Gs * Go;
      float Gv = Gs * Gp;
      float Gw = Gs * Gq;
      float Gx = Gt * Fr;
      float Gy = Gu * Fr;
      float Gz = Gv * Fr;
      float GA = Gw * Fr;
      float GN = FN - FF;
      int GO = FB + Ft;
      float GP = FL * FU;
      int BZw = GO & BZb;
      int C7E = BZw + Caa;
      int BQ8 = BPG + 8 * C7E; // S1
      int BQ9 = BQ8 + 0; // S2
      float GR = _data_f32_[BQ9 >> 2];
      float GS = GP * GR;
      int BQl = BQ8 + 4; // S3
      float GU = _data_f32_[BQl >> 2];
      float GV = GP * GU;
      float GX = Gd + GS;
      float H0 = Gg + GV;
      float H2 = GR * G8;
      float H3 = GR * GN;
      float H4 = GU * G8;
      float H5 = GU * GN;
      float H6 = GP * Gr;
      float H7 = H6 * H2;
      float H8 = H6 * H3;
      float H9 = H6 * H4;
      float Ha = H6 * H5;
      float Hb = H7 * Fr;
      float Hc = H8 * Fr;
      float Hd = H9 * Fr;
      float He = Ha * Fr;
      float Hg = Gx + Hb;
      float Hj = Gy + Hc;
      float Hm = Gz + Hd;
      float Hp = GA + He;
      float Hr = float(2.0);
      float Hs = Hr - FF;
      int Ht = int(2);
      int Hu = FB + Ht;
      float Hv = FL * G0;
      int BZM = Hu & BZb;
      int C7U = BZM + Caa;
      int BQw = BPG + 8 * C7U; // S1
      int BQx = BQw + 0; // S2
      float Hx = _data_f32_[BQx >> 2];
      float Hy = Hv * Hx;
      int BQJ = BQw + 4; // S3
      float HA = _data_f32_[BQJ >> 2];
      float HB = Hv * HA;
      float HD = GX + Hy;
      float HG = H0 + HB;
      float HI = Hx * G8;
      float HJ = Hx * Hs;
      float HK = HA * G8;
      float HL = HA * Hs;
      float HM = Hv * Gr;
      float HN = HM * HI;
      float HO = HM * HJ;
      float HP = HM * HK;
      float HQ = HM * HL;
      float HR = HN * Fr;
      float HS = HO * Fr;
      float HT = HP * Fr;
      float HU = HQ * Fr;
      float HW = Hg + HR;
      float HZ = Hj + HS;
      float I2 = Hm + HT;
      float I5 = Hp + HU;
      float I7 = FN - FE;
      int I8 = FA + Ft;
      float I9 = FT * FM;
      int BZY = I8 & BZb;
      int Cac = BZY << Ca9;
      int C8a = BZg + Cac;
      int BQU = BPG + 8 * C8a; // S1
      int BQV = BQU + 0; // S2
      float Ib = _data_f32_[BQV >> 2];
      float Ic = I9 * Ib;
      int BR7 = BQU + 4; // S3
      float Ie = _data_f32_[BR7 >> 2];
      float If = I9 * Ie;
      float Ih = HD + Ic;
      float Ik = HG + If;
      float Im = Ib * I7;
      float In = Ib * G9;
      float Io = Ie * I7;
      float Ip = Ie * G9;
      float Iq = I9 * Gr;
      float Ir = Iq * Im;
      float Is = Iq * In;
      float It = Iq * Io;
      float Iu = Iq * Ip;
      float Iv = Ir * Fr;
      float Iw = Is * Fr;
      float Ix = It * Fr;
      float Iy = Iu * Fr;
      float IA = HW + Iv;
      float ID = HZ + Iw;
      float IG = I2 + Ix;
      float IJ = I5 + Iy;
      float IL = FT * FU;
      int C8q = BZw + Cac;
      int BRi = BPG + 8 * C8q; // S1
      int BRj = BRi + 0; // S2
      float IN = _data_f32_[BRj >> 2];
      float IO = IL * IN;
      int BRv = BRi + 4; // S3
      float IQ = _data_f32_[BRv >> 2];
      float IR = IL * IQ;
      float IT = Ih + IO;
      float IW = Ik + IR;
      float IY = IN * I7;
      float IZ = IN * GN;
      float J0 = IQ * I7;
      float J1 = IQ * GN;
      float J2 = IL * Gr;
      float J3 = J2 * IY;
      float J4 = J2 * IZ;
      float J5 = J2 * J0;
      float J6 = J2 * J1;
      float J7 = J3 * Fr;
      float J8 = J4 * Fr;
      float J9 = J5 * Fr;
      float Ja = J6 * Fr;
      float Jc = IA + J7;
      float Jf = ID + J8;
      float Ji = IG + J9;
      float Jl = IJ + Ja;
      float Jn = FT * G0;
      int C8G = BZM + Cac;
      int BRG = BPG + 8 * C8G; // S1
      int BRH = BRG + 0; // S2
      float Jp = _data_f32_[BRH >> 2];
      float Jq = Jn * Jp;
      int BRT = BRG + 4; // S3
      float Js = _data_f32_[BRT >> 2];
      float Jt = Jn * Js;
      float Jv = IT + Jq;
      float Jy = IW + Jt;
      float JA = Jp * I7;
      float JB = Jp * Hs;
      float JC = Js * I7;
      float JD = Js * Hs;
      float JE = Jn * Gr;
      float JF = JE * JA;
      float JG = JE * JB;
      float JH = JE * JC;
      float JI = JE * JD;
      float JJ = JF * Fr;
      float JK = JG * Fr;
      float JL = JH * Fr;
      float JM = JI * Fr;
      float JO = Jc + JJ;
      float JR = Jf + JK;
      float JU = Ji + JL;
      float JX = Jl + JM;
      float JZ = Hr - FE;
      int K0 = FA + Ht;
      float K1 = FZ * FM;
      int C0K = K0 & BZb;
      int Cae = C0K << Ca9;
      int C8W = BZg + Cae;
      int BS4 = BPG + 8 * C8W; // S1
      int BS5 = BS4 + 0; // S2
      float K3 = _data_f32_[BS5 >> 2];
      float K4 = K1 * K3;
      int BSh = BS4 + 4; // S3
      float K6 = _data_f32_[BSh >> 2];
      float K7 = K1 * K6;
      float K9 = Jv + K4;
      float Kc = Jy + K7;
      float Ke = K3 * JZ;
      float Kf = K3 * G9;
      float Kg = K6 * JZ;
      float Kh = K6 * G9;
      float Ki = K1 * Gr;
      float Kj = Ki * Ke;
      float Kk = Ki * Kf;
      float Kl = Ki * Kg;
      float Km = Ki * Kh;
      float Kn = Kj * Fr;
      float Ko = Kk * Fr;
      float Kp = Kl * Fr;
      float Kq = Km * Fr;
      float Ks = JO + Kn;
      float Kv = JR + Ko;
      float Ky = JU + Kp;
      float KB = JX + Kq;
      float KD = FZ * FU;
      int C9c = BZw + Cae;
      int BSs = BPG + 8 * C9c; // S1
      int BSt = BSs + 0; // S2
      float KF = _data_f32_[BSt >> 2];
      float KG = KD * KF;
      int BSF = BSs + 4; // S3
      float KI = _data_f32_[BSF >> 2];
      float KJ = KD * KI;
      float KL = K9 + KG;
      float KO = Kc + KJ;
      float KQ = KF * JZ;
      float KR = KF * GN;
      float KS = KI * JZ;
      float KT = KI * GN;
      float KU = KD * Gr;
      float KV = KU * KQ;
      float KW = KU * KR;
      float KX = KU * KS;
      float KY = KU * KT;
      float KZ = KV * Fr;
      float L0 = KW * Fr;
      float L1 = KX * Fr;
      float L2 = KY * Fr;
      float L4 = Ks + KZ;
      float L7 = Kv + L0;
      float La = Ky + L1;
      float Ld = KB + L2;
      float Lf = FZ * G0;
      int C9s = BZM + Cae;
      int BSQ = BPG + 8 * C9s; // S1
      int BSR = BSQ + 0; // S2
      float Lh = _data_f32_[BSR >> 2];
      float Li = Lf * Lh;
      int BT3 = BSQ + 4; // S3
      float Lk = _data_f32_[BT3 >> 2];
      float Ll = Lf * Lk;
      float Ln = KL + Li;
      float Lq = KO + Ll;
      float Ls = Lh * JZ;
      float Lt = Lh * Hs;
      float Lu = Lk * JZ;
      float Lv = Lk * Hs;
      float Lw = Lf * Gr;
      float Lx = Lw * Ls;
      float Ly = Lw * Lt;
      float Lz = Lw * Lu;
      float LA = Lw * Lv;
      float LB = Lx * Fr;
      float LC = Ly * Fr;
      float LD = Lz * Fr;
      float LE = LA * Fr;
      float LG = L4 + LB;
      float LJ = L7 + LC;
      float LM = La + LD;
      float LP = Ld + LE;
      int _li_LT = 0;
      { // linear seek
        int _s0_LT = _args_i32_[16 + 1 * 8 + 0];
        int _s1_LT = _args_i32_[16 + 1 * 8 + 1];
        _li_LT *= _s0_LT;
        _li_LT += Fm;
        _li_LT *= _s1_LT;
        _li_LT += Fo;
      }
      int LT = _li_LT << 2;
      _arr1_f32_[LT >> 2] = Ln;
      int _li_LW = 0;
      { // linear seek
        int _s0_LW = _args_i32_[16 + 1 * 8 + 0];
        int _s1_LW = _args_i32_[16 + 1 * 8 + 1];
        _li_LW *= _s0_LW;
        _li_LW += Fm;
        _li_LW *= _s1_LW;
        _li_LW += Ft;
      }
      int LW = _li_LW << 2;
      _arr1_f32_[LW >> 2] = Lq;
      float LY = _arr1_f32_[LT >> 2];
      float LZ = float(0.0002);
      float M0 = LY * LZ;
      float M1 = Lq * LZ;
      float M2;
      { // Begin Atomic Op
      M2 = atomicAdd_arr0_f32(Fp >> 2, M0);
      } // End Atomic Op
      float M3;
      { // Begin Atomic Op
      M3 = atomicAdd_arr0_f32(Fu >> 2, M1);
      } // End Atomic Op
      int _li_M5 = 0;
      { // linear seek
        int _s0_M5 = _args_i32_[16 + 2 * 8 + 0];
        _li_M5 *= _s0_M5;
        _li_M5 += Fm;
      }
      int M5 = _li_M5 << 2;
      float M6 = _arr2_f32_[M5 >> 2];
      float M9 = LG + LP;
      float Ma = M9 * LZ;
      float Mb = Ma + FN;
      float Mc = M6 * Mb;
      _arr2_f32_[M5 >> 2] = Mc;
      int _li_Mf = 0;
      { // linear seek
        int _s0_Mf = _args_i32_[16 + 3 * 8 + 0];
        int _s1_Mf = _args_i32_[16 + 3 * 8 + 1];
        int _s2_Mf = _args_i32_[16 + 3 * 8 + 2];
        _li_Mf *= _s0_Mf;
        _li_Mf += Fm;
        _li_Mf *= _s1_Mf;
        _li_Mf += Fo;
        _li_Mf *= _s2_Mf;
        _li_Mf += Fo;
      }
      int Mf = _li_Mf << 2;
      _arr3_f32_[Mf >> 2] = LG;
      int _li_Mi = 0;
      { // linear seek
        int _s0_Mi = _args_i32_[16 + 3 * 8 + 0];
        int _s1_Mi = _args_i32_[16 + 3 * 8 + 1];
        int _s2_Mi = _args_i32_[16 + 3 * 8 + 2];
        _li_Mi *= _s0_Mi;
        _li_Mi += Fm;
        _li_Mi *= _s1_Mi;
        _li_Mi += Fo;
        _li_Mi *= _s2_Mi;
        _li_Mi += Ft;
      }
      int Mi = _li_Mi << 2;
      _arr3_f32_[Mi >> 2] = LJ;
      int _li_Ml = 0;
      { // linear seek
        int _s0_Ml = _args_i32_[16 + 3 * 8 + 0];
        int _s1_Ml = _args_i32_[16 + 3 * 8 + 1];
        int _s2_Ml = _args_i32_[16 + 3 * 8 + 2];
        _li_Ml *= _s0_Ml;
        _li_Ml += Fm;
        _li_Ml *= _s1_Ml;
        _li_Ml += Ft;
        _li_Ml *= _s2_Ml;
        _li_Ml += Fo;
      }
      int Ml = _li_Ml << 2;
      _arr3_f32_[Ml >> 2] = LM;
      int _li_Mn = 0;
      { // linear seek
        int _s0_Mn = _args_i32_[16 + 3 * 8 + 0];
        int _s1_Mn = _args_i32_[16 + 3 * 8 + 1];
        int _s2_Mn = _args_i32_[16 + 3 * 8 + 2];
        _li_Mn *= _s0_Mn;
        _li_Mn += Fm;
        _li_Mn *= _s1_Mn;
        _li_Mn += Ft;
        _li_Mn *= _s2_Mn;
        _li_Mn += Ft;
      }
      int Mn = _li_Mn << 2;
      _arr3_f32_[Mn >> 2] = LP;
  }
}

void main()
{
  substep_c54_05();
}
