#version 310 es
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
precision highp float;
layout(std430, binding = 0) buffer data_i32 { int _data_i32_[];}; 
layout(std430, binding = 0) buffer data_f32 { float _data_f32_[];}; 
layout(std430, binding = 1) buffer gtmp_i32 { int _gtmp_i32_[];}; 
layout(std430, binding = 1) buffer gtmp_f32 { float _gtmp_f32_[];}; 
layout(std430, binding = 2) buffer args_i32 { int _args_i32_[];}; 
layout(std430, binding = 2) buffer args_f32 { float _args_f32_[];}; 
layout(std430, binding = 4) buffer arr0_i32 { int _arr0_i32_[];}; 
layout(std430, binding = 4) buffer arr0_f32 { float _arr0_f32_[];}; 
float atomicAdd_data_f32(int addr, float rhs) { int old, new, ret; do { old = _data_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) + rhs)); } while (old != atomicCompSwap(_data_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicSub_data_f32(int addr, float rhs) { int old, new, ret; do { old = _data_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) - rhs)); } while (old != atomicCompSwap(_data_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMax_data_f32(int addr, float rhs) { int old, new, ret; do { old = _data_i32_[addr]; new = floatBitsToInt(max(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_data_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMin_data_f32(int addr, float rhs) { int old, new, ret; do { old = _data_i32_[addr]; new = floatBitsToInt(min(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_data_i32_[addr], old, new)); return intBitsToFloat(old); }float atomicAdd_gtmp_f32(int addr, float rhs) { int old, new, ret; do { old = _gtmp_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) + rhs)); } while (old != atomicCompSwap(_gtmp_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicSub_gtmp_f32(int addr, float rhs) { int old, new, ret; do { old = _gtmp_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) - rhs)); } while (old != atomicCompSwap(_gtmp_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMax_gtmp_f32(int addr, float rhs) { int old, new, ret; do { old = _gtmp_i32_[addr]; new = floatBitsToInt(max(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_gtmp_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMin_gtmp_f32(int addr, float rhs) { int old, new, ret; do { old = _gtmp_i32_[addr]; new = floatBitsToInt(min(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_gtmp_i32_[addr], old, new)); return intBitsToFloat(old); }float atomicAdd_arr0_f32(int addr, float rhs) { int old, new, ret; do { old = _arr0_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) + rhs)); } while (old != atomicCompSwap(_arr0_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicSub_arr0_f32(int addr, float rhs) { int old, new, ret; do { old = _arr0_i32_[addr]; new = floatBitsToInt((intBitsToFloat(old) - rhs)); } while (old != atomicCompSwap(_arr0_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMax_arr0_f32(int addr, float rhs) { int old, new, ret; do { old = _arr0_i32_[addr]; new = floatBitsToInt(max(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_arr0_i32_[addr], old, new)); return intBitsToFloat(old); } float atomicMin_arr0_f32(int addr, float rhs) { int old, new, ret; do { old = _arr0_i32_[addr]; new = floatBitsToInt(min(intBitsToFloat(old), rhs)); } while (old != atomicCompSwap(_arr0_i32_[addr], old, new)); return intBitsToFloat(old); }
const float inf = 1.0f / 0.0f;
const float nan = 0.0f / 0.0f;
void substep_c54_05()
{ // range for
  // range known at runtime
  int _beg = 0, _end = _gtmp_i32_[4 >> 2];
  int _sid0 = int(gl_GlobalInvocationID.x);
  for (int _sid = _sid0; _sid < (_end - _beg); _sid += int(gl_WorkGroupSize.x * gl_NumWorkGroups.x)) {
    int _itv = _beg + _sid;
      int Fg = _itv;
      int Fh = 4;
      int Fi = _gtmp_i32_[Fh >> 2];
      int Fj = Fg - Fi * int(Fg / Fi);
      int Fl = int(0);
      int _li_Fm = 0;
      { // linear seek
        int _s0_Fm = _args_i32_[16 + 0 * 8 + 0];
        int _s1_Fm = _args_i32_[16 + 0 * 8 + 1];
        _li_Fm *= _s0_Fm;
        _li_Fm += Fj;
        _li_Fm *= _s1_Fm;
        _li_Fm += Fl;
      }
      int Fm = _li_Fm << 2;
      float Fn = _arr0_f32_[Fm >> 2];
      float Fo = float(128.0);
      float Fp = Fn * Fo;
      int Fq = int(1);
      int _li_Fr = 0;
      { // linear seek
        int _s0_Fr = _args_i32_[16 + 0 * 8 + 0];
        int _s1_Fr = _args_i32_[16 + 0 * 8 + 1];
        _li_Fr *= _s0_Fr;
        _li_Fr += Fj;
        _li_Fr *= _s1_Fr;
        _li_Fr += Fq;
      }
      int Fr = _li_Fr << 2;
      float Fs = _arr0_f32_[Fr >> 2];
      float Ft = Fs * Fo;
      float Fu = float(0.5);
      float Fv = Fp - Fu;
      float Fw = Ft - Fu;
      int Fx = int(Fv);
      int Fy = int(Fw);
      float Fz = float(Fx);
      float FA = float(Fy);
      float FB = Fp - Fz;
      float FC = Ft - FA;
      float FD = float(1.5);
      float FE = FD - FB;
      float FF = FD - FC;
      float FG = FE * FE;
      float FH = FF * FF;
      float FI = FG * Fu;
      float FJ = FH * Fu;
      float FK = float(1.0);
      float FL = FB - FK;
      float FM = FC - FK;
      float FN = FL * FL;
      float FO = FM * FM;
      float FP = float(0.75);
      float FQ = FP - FN;
      float FR = FP - FO;
      float FS = FB - Fu;
      float FT = FC - Fu;
      float FU = FS * FS;
      float FV = FT * FT;
      float FW = FU * Fu;
      float FX = FV * Fu;
      float G4 = float(0.0);
      float G5 = G4 - FB;
      float G6 = G4 - FC;
      float G7 = FI * FJ;
      int BQ6 = 0;
      int BQ8 = BQ6 + 311296 * Fl; // S0
      int BQ9 = BQ8 + 180224; // S11
      int C1o = int(127);
      int C1p = Fx & C1o;
      int C1t = Fy & C1o;
      int Ce5 = int(7);
      int Ce6 = C1p << Ce5;
      int CaG = C1t + Ce6;
      int BQd = BQ9 + 8 * CaG; // S11
      int BQe = BQd + 0; // S12
      float G9 = _data_f32_[BQe >> 2];
      float Ga = G7 * G9;
      int BQq = BQd + 4; // S13
      float Gc = _data_f32_[BQq >> 2];
      float Gd = G7 * Gc;
      float Gk = G9 * G5;
      float Gl = G9 * G6;
      float Gm = Gc * G5;
      float Gn = Gc * G6;
      float Go = float(4.0);
      float Gp = G7 * Go;
      float Gq = Gp * Gk;
      float Gr = Gp * Gl;
      float Gs = Gp * Gm;
      float Gt = Gp * Gn;
      float Gu = Gq * Fo;
      float Gv = Gr * Fo;
      float Gw = Gs * Fo;
      float Gx = Gt * Fo;
      float GK = FK - FC;
      int GL = Fy + Fq;
      float GM = FI * FR;
      int C1J = GL & C1o;
      int CaW = C1J + Ce6;
      int BQB = BQ9 + 8 * CaW; // S11
      int BQC = BQB + 0; // S12
      float GO = _data_f32_[BQC >> 2];
      float GP = GM * GO;
      int BQO = BQB + 4; // S13
      float GR = _data_f32_[BQO >> 2];
      float GS = GM * GR;
      float GU = Ga + GP;
      float GX = Gd + GS;
      float GZ = GO * G5;
      float H0 = GO * GK;
      float H1 = GR * G5;
      float H2 = GR * GK;
      float H3 = GM * Go;
      float H4 = H3 * GZ;
      float H5 = H3 * H0;
      float H6 = H3 * H1;
      float H7 = H3 * H2;
      float H8 = H4 * Fo;
      float H9 = H5 * Fo;
      float Ha = H6 * Fo;
      float Hb = H7 * Fo;
      float Hd = Gu + H8;
      float Hg = Gv + H9;
      float Hj = Gw + Ha;
      float Hm = Gx + Hb;
      float Ho = float(2.0);
      float Hp = Ho - FC;
      int Hq = int(2);
      int Hr = Fy + Hq;
      float Hs = FI * FX;
      int C1Z = Hr & C1o;
      int Cbc = C1Z + Ce6;
      int BQZ = BQ9 + 8 * Cbc; // S11
      int BR0 = BQZ + 0; // S12
      float Hu = _data_f32_[BR0 >> 2];
      float Hv = Hs * Hu;
      int BRc = BQZ + 4; // S13
      float Hx = _data_f32_[BRc >> 2];
      float Hy = Hs * Hx;
      float HA = GU + Hv;
      float HD = GX + Hy;
      float HF = Hu * G5;
      float HG = Hu * Hp;
      float HH = Hx * G5;
      float HI = Hx * Hp;
      float HJ = Hs * Go;
      float HK = HJ * HF;
      float HL = HJ * HG;
      float HM = HJ * HH;
      float HN = HJ * HI;
      float HO = HK * Fo;
      float HP = HL * Fo;
      float HQ = HM * Fo;
      float HR = HN * Fo;
      float HT = Hd + HO;
      float HW = Hg + HP;
      float HZ = Hj + HQ;
      float I2 = Hm + HR;
      float I4 = FK - FB;
      int I5 = Fx + Fq;
      float I6 = FQ * FJ;
      int C2b = I5 & C1o;
      int Ce8 = C2b << Ce5;
      int Cbs = C1t + Ce8;
      int BRn = BQ9 + 8 * Cbs; // S11
      int BRo = BRn + 0; // S12
      float I8 = _data_f32_[BRo >> 2];
      float I9 = I6 * I8;
      int BRA = BRn + 4; // S13
      float Ib = _data_f32_[BRA >> 2];
      float Ic = I6 * Ib;
      float Ie = HA + I9;
      float Ih = HD + Ic;
      float Ij = I8 * I4;
      float Ik = I8 * G6;
      float Il = Ib * I4;
      float Im = Ib * G6;
      float In = I6 * Go;
      float Io = In * Ij;
      float Ip = In * Ik;
      float Iq = In * Il;
      float Ir = In * Im;
      float Is = Io * Fo;
      float It = Ip * Fo;
      float Iu = Iq * Fo;
      float Iv = Ir * Fo;
      float Ix = HT + Is;
      float IA = HW + It;
      float ID = HZ + Iu;
      float IG = I2 + Iv;
      float II = FQ * FR;
      int CbI = C1J + Ce8;
      int BRL = BQ9 + 8 * CbI; // S11
      int BRM = BRL + 0; // S12
      float IK = _data_f32_[BRM >> 2];
      float IL = II * IK;
      int BRY = BRL + 4; // S13
      float IN = _data_f32_[BRY >> 2];
      float IO = II * IN;
      float IQ = Ie + IL;
      float IT = Ih + IO;
      float IV = IK * I4;
      float IW = IK * GK;
      float IX = IN * I4;
      float IY = IN * GK;
      float IZ = II * Go;
      float J0 = IZ * IV;
      float J1 = IZ * IW;
      float J2 = IZ * IX;
      float J3 = IZ * IY;
      float J4 = J0 * Fo;
      float J5 = J1 * Fo;
      float J6 = J2 * Fo;
      float J7 = J3 * Fo;
      float J9 = Ix + J4;
      float Jc = IA + J5;
      float Jf = ID + J6;
      float Ji = IG + J7;
      float Jk = FQ * FX;
      int CbY = C1Z + Ce8;
      int BS9 = BQ9 + 8 * CbY; // S11
      int BSa = BS9 + 0; // S12
      float Jm = _data_f32_[BSa >> 2];
      float Jn = Jk * Jm;
      int BSm = BS9 + 4; // S13
      float Jp = _data_f32_[BSm >> 2];
      float Jq = Jk * Jp;
      float Js = IQ + Jn;
      float Jv = IT + Jq;
      float Jx = Jm * I4;
      float Jy = Jm * Hp;
      float Jz = Jp * I4;
      float JA = Jp * Hp;
      float JB = Jk * Go;
      float JC = JB * Jx;
      float JD = JB * Jy;
      float JE = JB * Jz;
      float JF = JB * JA;
      float JG = JC * Fo;
      float JH = JD * Fo;
      float JI = JE * Fo;
      float JJ = JF * Fo;
      float JL = J9 + JG;
      float JO = Jc + JH;
      float JR = Jf + JI;
      float JU = Ji + JJ;
      float JW = Ho - FB;
      int JX = Fx + Hq;
      float JY = FW * FJ;
      int C2X = JX & C1o;
      int Cea = C2X << Ce5;
      int Cce = C1t + Cea;
      int BSx = BQ9 + 8 * Cce; // S11
      int BSy = BSx + 0; // S12
      float K0 = _data_f32_[BSy >> 2];
      float K1 = JY * K0;
      int BSK = BSx + 4; // S13
      float K3 = _data_f32_[BSK >> 2];
      float K4 = JY * K3;
      float K6 = Js + K1;
      float K9 = Jv + K4;
      float Kb = K0 * JW;
      float Kc = K0 * G6;
      float Kd = K3 * JW;
      float Ke = K3 * G6;
      float Kf = JY * Go;
      float Kg = Kf * Kb;
      float Kh = Kf * Kc;
      float Ki = Kf * Kd;
      float Kj = Kf * Ke;
      float Kk = Kg * Fo;
      float Kl = Kh * Fo;
      float Km = Ki * Fo;
      float Kn = Kj * Fo;
      float Kp = JL + Kk;
      float Ks = JO + Kl;
      float Kv = JR + Km;
      float Ky = JU + Kn;
      float KA = FW * FR;
      int Ccu = C1J + Cea;
      int BSV = BQ9 + 8 * Ccu; // S11
      int BSW = BSV + 0; // S12
      float KC = _data_f32_[BSW >> 2];
      float KD = KA * KC;
      int BT8 = BSV + 4; // S13
      float KF = _data_f32_[BT8 >> 2];
      float KG = KA * KF;
      float KI = K6 + KD;
      float KL = K9 + KG;
      float KN = KC * JW;
      float KO = KC * GK;
      float KP = KF * JW;
      float KQ = KF * GK;
      float KR = KA * Go;
      float KS = KR * KN;
      float KT = KR * KO;
      float KU = KR * KP;
      float KV = KR * KQ;
      float KW = KS * Fo;
      float KX = KT * Fo;
      float KY = KU * Fo;
      float KZ = KV * Fo;
      float L1 = Kp + KW;
      float L4 = Ks + KX;
      float L7 = Kv + KY;
      float La = Ky + KZ;
      float Lc = FW * FX;
      int CcK = C1Z + Cea;
      int BTj = BQ9 + 8 * CcK; // S11
      int BTk = BTj + 0; // S12
      float Le = _data_f32_[BTk >> 2];
      float Lf = Lc * Le;
      int BTw = BTj + 4; // S13
      float Lh = _data_f32_[BTw >> 2];
      float Li = Lc * Lh;
      float Lk = KI + Lf;
      float Ln = KL + Li;
      float Lp = Le * JW;
      float Lq = Le * Hp;
      float Lr = Lh * JW;
      float Ls = Lh * Hp;
      float Lt = Lc * Go;
      float Lu = Lt * Lp;
      float Lv = Lt * Lq;
      float Lw = Lt * Lr;
      float Lx = Lt * Ls;
      float Ly = Lu * Fo;
      float Lz = Lv * Fo;
      float LA = Lw * Fo;
      float LB = Lx * Fo;
      float LD = L1 + Ly;
      float LG = L4 + Lz;
      float LJ = L7 + LA;
      float LM = La + LB;
      int BTC = BQ8 + 16384; // S1
      int C3I = int(4095);
      int C3J = Fj & C3I;
      int BTF = BTC + 8 * C3J; // S1
      int BTG = BTF + 0; // S2
      _data_f32_[BTG >> 2] = Lk;
      int BTQ = BTF + 4; // S3
      _data_f32_[BTQ >> 2] = Ln;
      float LU = float(0.0002);
      float LV = Lk * LU;
      float LW = Ln * LU;
      float LX;
      { // Begin Atomic Op
      LX = atomicAdd_arr0_f32(Fm >> 2, LV);
      } // End Atomic Op
      float LY;
      { // Begin Atomic Op
      LY = atomicAdd_arr0_f32(Fr >> 2, LW);
      } // End Atomic Op
      int BTW = BQ8 + 0; // S4
      int BTZ = BTW + 4 * C3J; // S4
      int BU0 = BTZ + 0; // S5
      float M0 = _data_f32_[BU0 >> 2];
      float M3 = LD + LM;
      float M4 = M3 * LU;
      float M5 = M4 + FK;
      float M6 = M0 * M5;
      _data_f32_[BU0 >> 2] = M6;
      int BUg = BQ8 + 49152; // S6
      int BUj = BUg + 16 * C3J; // S6
      int BUk = BUj + 0; // S7
      _data_f32_[BUk >> 2] = LD;
      int BUu = BUj + 4; // S8
      _data_f32_[BUu >> 2] = LG;
      int BUE = BUj + 8; // S9
      _data_f32_[BUE >> 2] = LJ;
      int BUO = BUj + 12; // S10
      _data_f32_[BUO >> 2] = LM;
  }
}

void main()
{
  substep_c54_05();
}
